#!/usr/bin/env python3
import argparse, os, sys
from sqlalchemy import create_engine
sys.path.insert(0, '..')
from wrds_fetch import wrds_update

def get_env_input():
	"""Get pg variables from command line, otherwise grep from OS."""
	parser = argparse.ArgumentParser(prog='./wrds_update', 
		description='Download tables from WRDS and upload to PostgreSQL.', 
		epilog='Report bugs to <ian.gow@unimelb.edu.au>.', 
		formatter_class=argparse.ArgumentDefaultsHelpFormatter, 
		conflict_handler='resolve')
	parser._optionals.title = 'Optional arguments'
	parser.add_argument('--help', action='help', default=argparse.SUPPRESS,
                    help='Show this help message and exit')

	connection = parser.add_argument_group('Connection arguments')
	connection.add_argument('-h', type=str, dest='host', action='store', nargs='?', default=os.getenv("PGHOST"), 
	                    help='PostgreSQL host')
	connection.add_argument('-p', type=int, dest='port', action='store', nargs='?', default=5432, 
		help='PostgreSQL port')
	connection.add_argument('-d', type=str, dest='dbname', action='store', nargs='?', default=os.getenv("PGDATABASE"), 
		help='PostgreSQL database')
	connection.add_argument('-f', type=str, dest='fpath', action='store', nargs='?', help='File path')
	connection.add_argument('-t', type=str, dest='table', action='store', nargs='?', required=True, 
		help='Table name')
	connection.add_argument('-s', type=str, dest='schema', action='store', nargs='?', required=True, 
		help='WRDS library name')
	connection.add_argument('-w', type=str, dest='wrds_id', action='store', nargs='?', default=os.getenv("WRDS_ID"), 
		help='WRDS ID')
	connection.add_argument('-u', type=str, dest='pguser', action='store', nargs='?', default=os.getenv("PGUSER"), 
		help='PostgreSQL user')

	program = parser.add_argument_group('Table arguments')
	program.add_argument('--fix_missing', type=bool, metavar='', help='Fix special missing values')
	program.add_argument('--fix_cr', type=bool,  metavar='', help='Fix character')
	program.add_argument('--drop', type=str,  metavar='', help='Columns to drop')
	program.add_argument('--obs', type=str,  metavar='', help='Number of observations to return')
	program.add_argument('--rename', type=str,  metavar='', help='Rename columns')
	program.add_argument('--force', type=str,  metavar='', help='Force update')

	args = parser.parse_args()

	# Check for connection variables
	if not args.host:
		args.host = os.getenv("PGHOST")
		if args.host:
			print("Using default pghost: ", args.host)
		else:
			print("Error: missing pghost. Specify database with -H.")
			quit()
	if not args.dbname:
		args.dbname = os.getenv("PGDATABASE")
		if args.dbname:
			print("Using default pgdatabase: ", args.host)
		else:
			print("Error: missing pgdatabase. Specify database with -D.")
			quit()
	if not args.fpath:
		print("No SAS file path detected. Specify file path with -P.")
	if not args.table:
		print("Error: missing table name. Specify file path with -T.")
		quit()		
	if not args.schema:
		print("Error: missing wrds libarry name. Specify library with -S.")
		quit()
	if not args.wrds_id:
		args.wrds_id = os.getenv("WRDS_ID")
		if args.wrds_id:
			print("Using default wrds_id: ", args.wrds_id)
		else:
			print("Error: missing wrds_id. Specify database with -W.")
			quit()
	if not args.pguser:
		args.pguser = os.getenv("PGUSER")
		if args.pguser:
				print("Using default pguser: ", args.pguser)
		else:
			print("Error: missing pguser. Specify database with -U.")
			quit()
	if not args.fix_missing:
		args.fix_missing = False
	if not args.fix_cr:
		args.fix_cr = False
	if not args.drop:
		args.drop = ""
	if not args.obs:
		args.obs = ""
	if not args.rename:
		args.rename = ""
	if not args.force:
		args.force = False

	print("\n**********************")
	print("Basic settings: ")
	print('pghost=', args.host)
	print('pgport=', args.port)
	print('pgdatabase=', args.dbname)
	print('file path=', args.fpath)
	print('table=', args.table)
	print('schema=', args.schema)
	print('wrds_id=', args.wrds_id)
	print('pguser=', args.pguser)
	print("**********************")
	return args
if __name__ == "__main__":
	args = get_env_input()
	engine = create_engine("postgresql://" + args.host + "/" + args.dbname)
	print(args)
	quit()
	wrds_update(args.table, args.schema, engine, args.wrds_id, args.fpath, args.force,
		fix_missing=args.fix_missing, fix_cr=args.fix_cr, drop=args.drop, obs=args.obs, 
		rename=args.rename)
